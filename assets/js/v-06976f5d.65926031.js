"use strict";(self.webpackChunkzhengjinhuai=self.webpackChunkzhengjinhuai||[]).push([[800],{3435:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t=JSON.parse('{"key":"v-06976f5d","path":"/web-security/","title":"Web Security","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"跨站脚本 （Cross-Site Scripting）XSS","slug":"跨站脚本-cross-site-scripting-xss","link":"#跨站脚本-cross-site-scripting-xss","children":[{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"防御措施","slug":"防御措施","link":"#防御措施","children":[]}]},{"level":2,"title":"跨站请求伪造（Cross-Site Request Forgery）CSRF","slug":"跨站请求伪造-cross-site-request-forgery-csrf","link":"#跨站请求伪造-cross-site-request-forgery-csrf","children":[{"level":3,"title":"CSRF 攻击的工作原理","slug":"csrf-攻击的工作原理","link":"#csrf-攻击的工作原理","children":[]},{"level":3,"title":"CSRF 攻击示例","slug":"csrf-攻击示例","link":"#csrf-攻击示例","children":[]},{"level":3,"title":"防御措施","slug":"防御措施-1","link":"#防御措施-1","children":[]}]}],"git":{"updatedTime":1719162578000,"contributors":[{"name":"zhengjinhuai","email":"873217817@qq.com","commits":2}]},"filePathRelative":"web-security/index.md"}')},2409:(a,n,s)=>{s.r(n),s.d(n,{default:()=>l});var t=s(6252);const e=[(0,t.uE)('<h1 id="web-security" tabindex="-1"><a class="header-anchor" href="#web-security" aria-hidden="true">#</a> Web Security</h1><blockquote><p>记录前端安全相关的知识点</p></blockquote><h2 id="跨站脚本-cross-site-scripting-xss" tabindex="-1"><a class="header-anchor" href="#跨站脚本-cross-site-scripting-xss" aria-hidden="true">#</a> 跨站脚本 （Cross-Site Scripting）XSS</h2><blockquote><p>攻击者通过注入恶意脚本代码到 Web 页面中，使得用户在浏览页面的时候执行这些恶意脚本，从而窃取用户敏感信息或者进行恶意操作</p></blockquote><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><ul><li><p>存储型 XSS（Stored XSS）</p></li><li><p>反射型 XSS（Reflected XSS）</p></li></ul><p>反射型 XSS 也称为非持久型 XSS，恶意脚本不会存储在服务器端，而是通过 URL 参数等方式反射回来并执行。用户点击恶意链接时，脚本会立即执行。</p><ul><li>DOM 型 XSS（DOM-Based XSS）</li></ul><p>DOM 型 XSS 是在客户端（浏览器）中发生的，攻击者通过操作 DOM 对象注入并执行恶意脚本。这种攻击类型不需要与服务器交互。</p><p>示例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> userInput <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;output&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> userInput<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用户访问包含恶意哈希值的 URL，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>#<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;XSS Attack!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>恶意脚本会被插入到页面中并执行。</p><h3 id="防御措施" tabindex="-1"><a class="header-anchor" href="#防御措施" aria-hidden="true">#</a> 防御措施</h3><ul><li>输入验证和清理 <ul><li>对用户输入的数据进行严格的验证和清理，移除或转义其中的特殊字符。</li></ul></li><li>输出编码 <ul><li>在将用户输入的数据输出到 HTML、JavaScript、CSS 等上下文中时，进行适当的编码，以防止脚本注入</li></ul></li><li>内容安全策略 <ul><li>使用 CSP 定义哪些资源可以加载和执行，从而减少 XSS 攻击的风险。</li></ul></li><li>HTTPOnly 和 Secure Cookie 标志 <ul><li>使用 HTTPOnly 标志防止客户端脚本访问 Cookie，使用 Secure 标志确保 Cookie 只能通过 HTTPS 传输。</li></ul></li><li>避免内联 JavaScript <ul><li>尽量避免在 HTML 中直接使用内联的 JavaScript 代码，使用外部脚本文件并通过正确的方式引用。</li></ul></li></ul><h2 id="跨站请求伪造-cross-site-request-forgery-csrf" tabindex="-1"><a class="header-anchor" href="#跨站请求伪造-cross-site-request-forgery-csrf" aria-hidden="true">#</a> 跨站请求伪造（Cross-Site Request Forgery）CSRF</h2><blockquote><p>攻击者通过诱导用户在已登录的 Web 应用中执行非预期的操作。</p></blockquote><p>与 XSS 不同，CSRF 不需要注入恶意代码到受害者的浏览器中，而是利用受害者在浏览器中的已认证状态，通过伪造请求来实现攻击。</p><h3 id="csrf-攻击的工作原理" tabindex="-1"><a class="header-anchor" href="#csrf-攻击的工作原理" aria-hidden="true">#</a> CSRF 攻击的工作原理</h3><p>CSRF 攻击利用了 Web 浏览器的一个特点：在同一个浏览器会话中，如果用户已经登录某个网站，那么浏览器会自动附带相关的认证信息（如 Cookie）进行请求。攻击者通过各种方式（如发送电子邮件、聊天信息或诱导点击恶意链接）让受害者在已登录的状态下访问攻击者构造的恶意网站或链接，从而在后台向目标网站发送伪造请求。</p><h3 id="csrf-攻击示例" tabindex="-1"><a class="header-anchor" href="#csrf-攻击示例" aria-hidden="true">#</a> CSRF 攻击示例</h3><p>假设一个用户已经登录了某个银行网站，该网站允许用户通过以下请求 URL 进行转账：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>http://bank.com/transfer?amount=1000&amp;to=account123\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>攻击者构造一个恶意网站，在页面中包含一个自动提交的表单：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://bank.com/transfer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>GET<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>amount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>to<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>attacker_account<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n      document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当受害者访问这个恶意页面时，表单会自动提交，导致资金从受害者的账户转移到攻击者的账户。</p><h3 id="防御措施-1" tabindex="-1"><a class="header-anchor" href="#防御措施-1" aria-hidden="true">#</a> 防御措施</h3><ol><li><p>使用 CSRF 令牌（CSRF Tokens）：</p><ul><li>在每个受保护的请求中包含一个唯一的、难以预测的令牌。服务器在响应中生成并嵌入该令牌，然后在后续请求中验证令牌是否匹配。令牌可以通过隐藏表单字段、HTTP 头或 Cookie 等方式传递。</li></ul></li><li><p>验证 Referer 或 Origin 头：</p><ul><li>验证请求的 Referer 或 Origin 头是否来自受信任的域名，以确保请求是从同一个网站发出的。注意，这种方法并不是百分之百可靠，因为 Referer 头可以被某些情况下伪造或缺失。</li></ul></li><li><p>使用 SameSite Cookie 属性：</p><ul><li>将 Cookie 的 SameSite 属性设置为 Strict 或 Lax，以限制跨站请求时 Cookie 的发送行为，从而减少 CSRF 攻击的风险。</li></ul></li><li><p>双重提交 Cookie（Double Submit Cookie）：</p><ul><li>将 CSRF 令牌存储在 Cookie 中，并在请求中同时提交该令牌（通过表单字段或 HTTP 头）。服务器验证请求中的令牌与 Cookie 中的令牌是否一致。</li></ul></li></ol>',29)],p={},l=(0,s(3744).Z)(p,[["render",function(a,n){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])}}]);